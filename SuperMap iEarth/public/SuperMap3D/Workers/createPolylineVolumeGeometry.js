define(["./defaultValue-2110bb17","./Ellipsoid-ca2b8eb1","./arrayRemoveDuplicates-5016d6bb","./BoundingRectangle-9ce5f54f","./buildModuleUrl-36ce0ebc","./Cartesian3-c1138337","./ComponentDatatype-3cfb1146","./PolylineVolumeGeometryLibrary-8564ed0e","./Check-92c551fb","./GeometryAttribute-b12ab6bd","./GeometryAttributes-3cad3ff9","./GeometryPipeline-7f49beb8","./IndexDatatype-d833345d","./Math-cd1437d9","./oneTimeWarning-84987f6b","./PolygonPipeline-478e7e0d","./PrimitiveType-d9ba7368","./VertexFormat-295b1d1f","./Cartographic-630e5de6","./Rectangle-52f780a9","./FeatureDetection-e7fb956a","./defer-a21481c0","./Event-589349b0","./RuntimeError-6daf0e01","./WebGLConstants-92042d9e","./Cartesian4-5c264813","./EllipsoidTangentPlane-6f479ced","./IntersectionTests-88230423","./Plane-8f19018a","./PolylinePipeline-92dcfbc3","./EllipsoidGeodesic-262ae711","./EllipsoidRhumbLine-89d13f20","./AttributeCompression-79e23de9","./EncodedCartesian3-4c81d2ea"],(function(e,t,n,o,i,r,a,s,p,l,c,u,d,y,g,h,f,m,v,b,k,_,P,L,w,E,C,A,D,T,F,R,G,x){"use strict";function O(n){var o=(n=e.u(n,e.u.EMPTY_OBJECT)).polylinePositions,i=n.shapePositions;if(!e.e(o))throw new p.t("options.polylinePositions is required.");if(!e.e(i))throw new p.t("options.shapePositions is required.");this._positions=o,this._shape=i,this._ellipsoid=t.t.clone(e.u(n.ellipsoid,t.t.WGS84)),this._cornerType=e.u(n.cornerType,s.S.ROUNDED),this._vertexFormat=m.n.clone(e.u(n.vertexFormat,m.n.DEFAULT)),this._granularity=e.u(n.granularity,y.e.RADIANS_PER_DEGREE),this._workerName="createPolylineVolumeGeometry",this.enuCenter=e.u(n.enuCenter,r.o.ZERO);var a=1+o.length*r.o.packedLength;a+=1+i.length*t.o.packedLength+r.o.packedLength,this.packedLength=a+t.t.packedLength+m.n.packedLength+2}O.pack=function(n,o,i){if(!e.e(n))throw new p.t("value is required");if(!e.e(o))throw new p.t("array is required");i=e.u(i,0);var a,s=n._positions,l=s.length;for(o[i++]=l,a=0;a<l;++a,i+=r.o.packedLength)r.o.pack(s[a],o,i);var c=n._shape;for(l=c.length,o[i++]=l,a=0;a<l;++a,i+=t.o.packedLength)t.o.pack(c[a],o,i);return t.t.pack(n._ellipsoid,o,i),i+=t.t.packedLength,m.n.pack(n._vertexFormat,o,i),i+=m.n.packedLength,o[i++]=n._cornerType,o[i++]=n._granularity,r.o.pack(n.enuCenter,o,i),o};var I=t.t.clone(t.t.UNIT_SPHERE),S=new m.n,q={polylinePositions:void 0,shapePositions:void 0,ellipsoid:I,vertexFormat:S,cornerType:void 0,granularity:void 0,enuCenter:void 0};O.unpack=function(n,o,i){if(!e.e(n))throw new p.t("array is required");o=e.u(o,0);var a,s=n[o++],l=new Array(s);for(a=0;a<s;++a,o+=r.o.packedLength)l[a]=r.o.unpack(n,o);s=n[o++];var c=new Array(s);for(a=0;a<s;++a,o+=t.o.packedLength)c[a]=t.o.unpack(n,o);var u=t.t.unpack(n,o,I);o+=t.t.packedLength;var d=m.n.unpack(n,o,S);o+=m.n.packedLength;var y,g=n[o++],h=n[o++];return y=r.o.unpack(n,o),e.e(i)?(i._positions=l,i._shape=c,i._ellipsoid=t.t.clone(u,i._ellipsoid),i._vertexFormat=m.n.clone(d,i._vertexFormat),i._cornerType=g,i._granularity=h,i.enuCenter=y,i):(q.polylinePositions=l,q.shapePositions=c,q.cornerType=g,q.granularity=h,q.enuCenter=y,new O(q))};var N=new o.f;return O.createGeometry=function(t){for(var p=t._positions,y=n.D(p,r.o.equalsEpsilon),m=y.length,v=new Array(m),b=0;b<m;b++)v[b]=r.o.clone(y[b]);var k=t._shape;if(k=s.J.removeDuplicatesFromShape(k),!(y.length<2||k.length<3)){h.A.computeWindingOrder2D(k)===h.W.CLOCKWISE&&k.reverse();var _=o.f.fromPoints(k,N),P={};if(P.combinedPositions=s.J.computePositions(v,k,_,t,!0),!r.o.equals(t.enuCenter,r.o.ZERO)){var L=new Array(m);for(b=0;b<m;b++)L[b]=r.o.clone(y[b]);P.combinedLocalPositions=s.J.computeLocalPositions(L,k,_,t,!0,t.enuCenter)}return function(t,n,o,r){var s=t.combinedPositions,p=t.combinedLocalPositions,y=new c.a;r.position&&(y.position=new l.o({componentDatatype:a.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:s}));var m,v,b,k,_,P,L=n.length,w=s.length/3,E=(w-2*L)/(2*L),C=h.A.triangulate(n),A=(E-1)*L*6+2*C.length,D=d.IndexDatatype.createTypedArray(w,A),T=2*L,F=0;for(m=0;m<E-1;m++){for(v=0;v<L-1;v++)P=(b=2*v+m*L*2)+T,_=(k=b+1)+T,D[F++]=k,D[F++]=b,D[F++]=_,D[F++]=_,D[F++]=b,D[F++]=P;_=(k=1+(b=2*L-2+m*L*2))+T,P=b+T,D[F++]=k,D[F++]=b,D[F++]=_,D[F++]=_,D[F++]=b,D[F++]=P}if(r.st||r.tangent||r.bitangent){var R,G,x=new Float32Array(2*w),O=1/(E-1),I=1/o.height,S=o.height/2,q=0;for(m=0;m<E;m++){for(R=m*O,G=I*(n[0].y+S),x[q++]=R,x[q++]=G,v=1;v<L;v++)G=I*(n[v].y+S),x[q++]=R,x[q++]=G,x[q++]=R,x[q++]=G;G=I*(n[0].y+S),x[q++]=R,x[q++]=G}for(v=0;v<L;v++)R=0,G=I*(n[v].y+S),x[q++]=R,x[q++]=G;for(v=0;v<L;v++)R=(E-1)*O,G=I*(n[v].y+S),x[q++]=R,x[q++]=G;y.st=new l.o({componentDatatype:a.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:new Float32Array(x)})}var N=w-2*L;for(m=0;m<C.length;m+=3){var U=C[m]+N,W=C[m+1]+N,V=C[m+2]+N;D[F++]=U,D[F++]=W,D[F++]=V,D[F++]=V+L,D[F++]=W+L,D[F++]=U+L}var B=new l.I({attributes:y,indices:D,boundingSphere:i.i.fromVertices(s),primitiveType:f._0xa706e5.TRIANGLES});if(r.normal&&(B=u.k.computeNormal(B)),r.tangent||r.bitangent){try{B=u.k.computeTangentAndBitangent(B)}catch{g.e("polyline-volume-tangent-bitangent","Unable to compute tangents and bitangents for polyline volume geometry")}r.tangent||(B.attributes.tangent=void 0),r.bitangent||(B.attributes.bitangent=void 0),r.st||(B.attributes.st=void 0)}return e.e(p)&&(B.attributes.position.values=p,B.attributes.position.componentDatatype=a.ComponentDatatype.FLOAT),B}(P,k,_,t._vertexFormat)}},function(n,o){return e.e(o)&&(n=O.unpack(n,o)),n._ellipsoid=t.t.clone(n._ellipsoid),O.createGeometry(n)}}));
